version: 2.1
parameters:

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
      # Add parameter here   
    steps:
      - run:
          name: Delete S3 files
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" 
            aws cloudformation delete-stack \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" 

              

  revert-migrations:
    description: Revert the last migration
    parameters:
        workflow_id:
            type: string      
    steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
                # Your Memstash or kvdb.io GET URL code goes here
                # Example: Memstash.io
                # SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
                # Example: kvdb.io
                SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)
                # Logic for reverting the database state
                if (( $SUCCESS == 1 ));
                then
                    cd ~/project/backend
                    npm install
                    npm run migration:revert
                fi  

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:     
            - frontend-build
      - run: 
          name: test front-end
          command: |
                cd frontend
                # npm install
                npm run test
                # npm test
                
  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:     
            - backend-build
      - run: 
          name: test back-end
          command: |
                cd backend
                npm install
                # npm run test
                npm test  
            
  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:

      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:     
            - front-build
      - run: 
          name: scan front-end
          command: |
                cd frontend
                npm install
                npm audit fix --audit-level=critical --force
                # npm audit fix --audit-level=critical --force
                # npm audit fix --audit-level=critical --force
                # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
                # npm audit --audit-level=critical
                # npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0     ## install python too manually here 
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys:     
            - backend-build
      - run: 
          name: scan back-end
          command: |
                cd backend
                npm install
                npm audit fix --audit-level=critical --force
                # npm audit fix --audit-level=critical --force
                # # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
                # npm audit --audit-level=critical
                # npm audit fix --audit-level=critical --force
               
  deploy-infrastructure:
    docker:
      - image: cimg/aws:2022.11
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --filters "Name=tag:project,Values=udapeople"  \
            --output=text  >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      


  configure-infrastructure:
    docker: 
    # - image:  ansible/ansible
              
    # Checkout code from git
    # Add ssh keys with fingerprint
    # attach workspace

    - image: cimg/python:3.11.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update ; sudo apt install ansible tar gzip
            ansible --version

      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints:
            - "06:18:dc:e7:89:dc:65:d0:fa:42:51:1d:e4:0a:20:7c"
      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            cd .circleci/ansible
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory.txt configure-server.yml
          
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
       - image: cimg/node:13.8.0
    steps:
      
      - checkout
      - run:
          name: Run migrations
          command:  |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration results to memstash
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                  then
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
     # Here's where you will add some code to rollback on failure      
      # - destroy-environment
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      
      - image: cimg/node:13.8.0
      # - image: cimg/aws:2022.11
    steps:
      - checkout
      - restore_cache:
          keys:     
            - frontend-build
      - run:
          name: Install dependencies
          command: |
            sudo apt update && sudo apt -y install  curl tar 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:project,Values=udapeople"  --output=text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            #  curl -s https://deb.nodesource.com/setup_16.x | sudo bash
            #   sudo apt install nodejs -y
            node -v
            cd frontend
            npm install
            npm run build
            ls
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive


      # Here's where you will add some code to rollback on failure   
      # - run:
      #     name: destroy the environemtn
      #     command: |   
      -  destroy-environment

                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
       - image: cimg/python:3.11.0
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - add_ssh_keys:
          fingerprints:
            - "06:18:dc:e7:89:dc:65:d0:fa:42:51:1d:e4:0a:20:7c"

      - run:
                name: Deploy backend
                command: |
                  sudo apt update -y  && sudo apt  install -y  ansible  nodejs npm 
      - restore_cache:
          keys:     
            - backend-build

      - run:
          name: Deploy backend
          command: |

            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf ~/artifact.tar.gz .
            # scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  ./artifact.tar.gz ubuntu@$BACKEND_IP:
      - attach_workspace:
          at: ~/
      - run:
          name: Run ansible playbook
          command: |
            cat .circleci/ansible/inventory.txt
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook  -i inventory.txt deploy-backend.yml 
      # Here's where you will add some code to rollback on failure  
      # - run:
      #     name: destroy the environemtn
      #     command: |   
      -  destroy-environment

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/base:2022.11
    steps:
      # Checkout code from git 
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update && sudo apt install  curl tar 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:project,Values=udapeople"  --output=text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            echo ${BACKEND_IP} > BACKEND_IP

      - persist_to_workspace:
          root: .
          paths:
              - BACKEND_IP

      - attach_workspace:
          at: .

      - run:
          name: Backend smoke test.
          command: |
              # Fetch and prepare the BACKEND_IP env var
              BACKEND_IP=$(cat BACKEND_IP)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  exit 0
              else
                  exit 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                exit 0
              else
                exit 1
              fi
      
      - destroy-environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  cloudfront-update:
    docker:
      - image: cimg/aws:2022.11
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install dependencies
          command: |
            echo 000
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
        # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  cleanup:
      docker:
        # Docker image here
        - image: cimg/aws:2022.11
      steps:
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              # export OldWorkflowID="the id here"
              # export STACKS=[] #put the list of stacks here
              # Fetch the Old workflow ID
              export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              # Fetch the stack names          
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
              echo Stack names: "${STACKS[@]}"          

        - run:
            name: Remove old stacks and files
            command: |
              # if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              # then
              #   # your code here
              # fi
              # You can use any condition like:
              # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              # if [[ "${OldWorkflowID}" != "${STACKS[@]}"  ]]
              echo "${CIRCLE_WORKFLOW_ID}" \n
              echo "${OldWorkflowID}" \n 
              echo "#########################"
              echo Stack names: "${STACKS[@]}" 
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              echo "#########################"
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
              then
              echo "____________________________deleteing____________________________" 
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              else
              echo "____________________________Cannot delete____________________________" 
              fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      